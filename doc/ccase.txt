*ccase.txt*                  For Vim version 6.0.
             LAST MODIFICATION: "Fri, 05 Apr 2002 16:52:10 (dp)"


		  VIM REFERENCE MANUAL    by Douglas Potts


1. Overview					*ccase-overview* *ccase-plugin*

Similar to the various RCS and CVS menu plugins available on
http://vim.sourceforge.net, this plugin deals with version control.
Specifically it is written to interact with Rational's ClearCase version
control product (not a plug, it is just what I've been using for my last two
places of employment).

There are three parts to this plugin:
  1. Command Mode abbreviations (see also |:cabbrev|)
  2. Normal Mode mappings       (see also |:nmap|)
  3. Menus for commands

The functionality mentioned here is a plugin, see |add-plugin|.
This plugin is only available if 'compatible' is not set.
You can avoid loading this plugin by setting the "loaded_ccase" variable
in your |vimrc| file: >
	:let loaded_ccase = 1

{Vi does not have any of this}

==============================================================================
2. Commands

Common Commands:~
							*:ctco*
Checkout out the current file (default is checkout reserved).  This will
prompt for a checkout comment depending on the value of |g:ccaseNoComment|.

							*:ctcou*
Checkout out the current file unreserved.  This will prompt for a checkout
comment depending on the value of |g:ccaseNoComment|.

							*:ctci*
Check in the current file.  This will prompt for a checkin comment depending
on the value of |g:ccaseNoComment|.

							*:ctmk*
Make the current file a VOB element.  This will, depending on the value of
|g:ccaseNoComment|, prompt for a checkout comment (for the directory of the
new element, if the directory has not already been checked out), a element
creation comment for the file, and prompt for a directory checkin comment
depending on the value of |g:ccaseLeaveDirCO|.

							*:ctunco*
Un-checkout the current file.  Utilizes the behavior of the ClearCase(R)
"cleartool uncheckout" command to prompt the user for whether or not to copy
the view private version to a .keep file.

							*::ctcoc*
List the checkouts for the current user, for this view, in the current working
directory.

							*:ctcor*
List the checkouts for the current user, for this view, in the current working
directory, and all of it's subdirectories.  This redirects the output from the
"cleartool lsco" command to a results file |g:ccaseTmpFile|, and splits the
window, and opens the results file in that new window.

							*:ctcov*
List the checkouts for the current user, for this view, in any VOB.  This
redirects the output from the "cleartool lsco" command to a results file
|g:ccaseTmpFile|, and splits the window, and opens the results file in that
new window.


Uncommmon Commands:~
							*:cthist*
List the version history for the current file.  This redirects the output from
the "cleartool lshist" command to a results file |g:ccaseTmpFile|, and splits
the window, and opens the results file in that new window.

							*:ctdesc*
Lists the element description for the current file.  This redirects the output
from the "cleartool describe" command to a results file |g:ccaseTmpFile|, and
splits the window, and opens the results file in that new window.

							*:ctpwv*
Echo the current working view to the status line.

							*:ctxlsv*
Spawn off the ClearCase(R) xlsvtree (graphical version tree viewer) for the
current file.
							*:ctdiff*
Spawn off the clearcase graphical diff tool to display differences between the
current file and its immediate predecessor.

							*:ctpdif*
Perform a |:diffsplit| on the predecessor version of the current file.
Depending on the value of |g:ccaseDiffVertSplit|, the split will be vertical
or horizontal.

							*:ctqdif*
Perform a |:diffsplit| on a queried predecessor version of the current file.
Depending on the value of |g:ccaseDiffVertSplit|, the split will be vertical
or horizontal.


							*ccase-UCM*
ClearCase(R) Unified Change Management extensions (UCM)~
ClearCase(R) has a software extension called UCM that assists in the creation
of version branches, version synchronization, and program baselining.

							*:ctlsc*
Echo the current working/default UCM activity to the status line.

							*:ctlsa*
List all of the UCM activities for this view.  This redirects the output from
the "cleartool lsactivty" command to a results file, and splits open a new
window containing these results.

							*:ctsta*
Set the current working/default UCM activity.

==============================================================================

3. Normal Mode maps

The Normal Mode maps utilize the |<Leader>| character for maps which provide
provide the same functionality as their Command equivalents, except that they
take the filename under the cursor as the file that they operate on.  This is
very useful if you do a checkout listing that returns a text file list.  You
can then put the cursor on one of the filenames in the list, and perform a
check in operation on that file.

							*<Leader>ctci*
Performs a check in operation on the filename under the cursor.  See |:ctci|
for the operational details of what the |ccase-plugin| does for a file check
in.

							*<Leader>ctcor*
Performs a reserved check out operation on the filename under the cursor.  See
|:ctco| for the operational details of what the |ccase-plugin| does for a file
check out.

							*<Leader>ctcou*
Performs an unreserved check out operation on the filename under the cursor.
See |:ctcou| for the operational details of what the |ccase-plugin| does for a
file check out.

							*<Leader>ctunco*
Performs an uncheckout operation on the filename under the cursor.  See
|:ctunco| for the operational details of what the |ccase-plugin| does for a
unchecking out a file.

							*<Leader>cthist*
Performs a list history operation on the filename under the cursor.  See
|:cthist| for the operational details of what the |ccase-plugin| does for a
listing of version history.

							*<Leader>ctxl*
Performs a open element version tree  operation on the filename under the
cursor.  See |:ctxlsv| for the operational details of what the |ccase-plugin|
does for a version tree listing of version history.

							*<Leader>ctpdif*
Performs a diff with previous version operation on the filename under the
cursor.  See |:ctpdif| for the operational details of what the |ccase-plugin|
does for diff'ing against the file's predecessor version.

							*<Leader>ctqdif*
Performs a diff with queried operation on the filename under the cursor.  See
|:ctqdif| for the operational details of what the |ccase-plugin| does for
diff'ing against a queried predecessor to the file.


==============================================================================

4. Menus

All of the commands listed in Section 2, are available via the Clearcase menu
which is added to the main menu line.  They are available on the GUI enabled
versions (obviously) and on console versions via |:emenu| and |'wildmenu'|.

==============================================================================
5. Options						*ccase-options*

The ccase-plugin provides several variables that modify the behavior of the
plugin.  Each option has a default value provided within the plugin, for use
if the user has not provided a value in his or her |vimrc| file.  Below is a
listing of these options with their default values, and a short description of
what they do.  The format for changing the behavior from the default is: >
  <your .vimrc>
  .
  .
  let g:ccaseUseDialog=0	" Don't use dialog boxes
  .
  .

Or for a temporary change, from the command line: >
  :let ccaseUseDialog=0
~
                                                      *g:ccaseTmpFile*
String         		(Unix default:          "/tmp/results.txt"
			 Windows/DOS default:   "c:\temp\results.txt")

Filename (including path) in which to redirect output from shell commands.
Used in |:cthist| to redirect output from ClearCase command into a file, and
that file is opened to display the results, and allow for operations on those
results.

                                                      *g:ccaseUseDialog*
Integer boolean		(default for gvim:  1=Use a dialog box for input,
			 default for vim:   0=Use other input method)

If you are running the graphical version of VIM, You have the option of
getting a graphical dialog box for interactions with the plugin.  Mainly for
the purpose of querying about checkout or checkin comments.  Don't worry if
you are running the console version as you are still prompted, just not via a
dialog box.  In fact, with the non-dialog box you can use the arrow keys to go
back in the input history to reuse earlier entries.

						      *g:ccaseNoComment*
Integer boolean		(default:  0=Ask for comments)

ClearCase allow for providing checkout and checkin comments per file.  If you
don't use this comment functionality, and don't want to be prompted for it
upon file checkout or checkin, then set g:ccaseNoComment=1.

						      *g:ccaseDiffVertSplit*
Integer boolean		(default:  1=Split window vertically for diffs)

When performing a diff with another version, it is possible to split the
window vertically or horizontally.  The default is to split the window
vertically in two and diff the two files.

						      *g:ccaseAutoLoad*
Integer boolean		(default:  1=Automatically reload file upon checkin or
				     checkout)

Upon checkout or checkin, the permissions on the file that you are working on
change.  With g:ccaseAutoLoad=1, the file is reloaded after the checkin or
checkout operation completes.  If you do not want to reload the file upon
checkout or checkin, set g:ccaseAutoLoad=0.

						      *g:ccaseMkelemCheckedout*
Integer boolean		(default:  0=Make an element, and don't check them out)

When editting a file, and then making that file a ClearCase(R) element, it is
possible to create the element (which is then considered checked in), or have
the element checked out once it has been added as an element.

						      *g:ccaseLeaveDirCO*
Integer boolean		(default:  0=When checking out a directory to add an
                                   element to, don't check the directory back
                                   in)

When making an existing file an element, the directory, in which it is been
made an element of, must be checked out.  The plugin checks to see whether or
not the directory is in fact checked out, and if it is not checkout out,
prompts the user to check out the directory.  After the file has been made an
element, the directory can remain checked out (to add other elements) or
checked back in.  If g:ccaseLeaveDirCO=0, the user will be prompted whether or
not the directory should be checked back in.  When g:ccaseLeaveDirCO=1, the
user is not prompted to check the directory back in.

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
